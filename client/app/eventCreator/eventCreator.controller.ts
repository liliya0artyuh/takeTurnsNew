'use strict';
(function(){

            var notificationWindow;
            var missingFieldsWindow;
            var updateEventWindow;
            var awesomeCalendars = [];
            var calendar;
            var userIDtemp;
            var user;
            var eventID;
            var eventTitle;
            var eventHost;
            var eventDate;
            var eventStartTime;
            var eventEndTime;
            var eventInfo;
            var eventReminder;
            var eventGuestList = [];
            var eDate;
            var http;
            var rootScope;
            var notificationService;
            var uibModal ;
            var cal_days_labels;
            var cal_months_labels;
            var eventButtonName;
            var window;
            var titleOptions;
            var selectedTitleOption;

class EventCreatorComponent {

 constructor($http, $scope, socket, $rootScope, $window, $uibModal, eventDataContainer, userDataContainer, notificationService, emailDataContainer) {
            this.http = $http;
            this.rootScope = $rootScope;
            this.window = $window;
            this.notificationService = notificationService;
            this.userDataContainer = userDataContainer;
            this.uibModal = $uibModal;
            this.eventDataContainer = eventDataContainer;
            this.eventButtonName = this.eventDataContainer.getButtonName();
            this.eventDate = new Date(this.eventDataContainer.getEventDate());
                // this.eventStartTime = new Date(this.eventDataContainer.getStartTime());
            this.eventStartTime = new Date(this.eventDataContainer.getStartTime());
            this.eventEndTime = new Date(this.eventDataContainer.getEndTime());
            this.eventInfo = this.eventDataContainer.getDescription();
            this.eventId = this.eventDataContainer.getEventId();
            this.eventHost = this.eventDataContainer.getHostName();
            this.eventTitle = this.eventDataContainer.getTitle();

            this.titleOptions = ['Day shift', 'Eve shift', 'Lunch', 'Dinner', 'Visit'];

                        // these are labels for the days of the week
            this.cal_days_labels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

            // these are human-readable month name labels, in order
            this.cal_months_labels = ['January', 'February', 'March', 'April',
                     'May', 'June', 'July', 'August', 'September',
                     'October', 'November', 'December'];
            //get calendar id from user ----------------------------
            paramSerializer: '$httpParamSerializerJQLike';

            //send request to BE to get user and then call method to get calendar------------------------------------
          if (this.userDataContainer.getUserId()) {
                $http.get('/api/users/' + this.userDataContainer.getUserId()).then(response => {
                this.user = response.data;
                this.getCalendar();
                socket.syncUpdates('calendar', this.calendar);
            });
            } else {
                console.log("ERROR - userID is undefined. please use the link that was provided to you when the calendar was created.");
            }
           

            //autogenerated code --------------------------------------
            $scope.$on('$destroy', function() {
                socket.unsyncUpdates('calendar');
            });
        }

        //send request to BE to get calendar details -------------------------------
        getCalendar() {
            this.http.get('/api/calendars/' + this.user.calID).then(response => {
                this.calendar = response.data;
            });
        }

//generic method to submit event
        submitEvent(){
            this.getEventDate();
            
            if(this.eventTitle && this.eventHost && this.eventDate && this.eventStartTime){
                switch(this.eventButtonName) {
                    case "CREATE EVENT":
                    this.addEvent();
                    break;
                    case "UPDATE EVENT":
                    this.updateEvent();
                    break;
                    case "CREATE COPY":
                    this.addEvent();
                    break;
                }
              } else {
                console.log("display modal or highlight all required fields");
                this.notifyMissingFields();
            }
        }

        //send request to create new event - code is not working yet ------------------------------------------
        addEvent() {
                this.http.put('/api/calendars/addEvent/' + this.calendar._id, {title:this.eventTitle, host: this.eventHost, date: this.eventDate,
                startTime:this.eventStartTime, endTime:this.eventEndTime, info: this.eventInfo, reminder:this.eventReminder}).then(response => {
                    if(response.status === 201){
                        this.user = response.data;
                        this.notifyEventCreated(this.eventTitle, this.eventDate, this.eventHost);
                        this.resetValues();
                    } else {
                        this.window.location.href='app/errors/unknown.html';  
                    }
                });
          
        }

         // Update Events
        updateEvent() {
            this.http.put('/api/calendars/updateEvent/' + this.calendar._id, {eventId: this.eventId, title:this.eventTitle, host: this.eventHost, date: this.eventDate,
                startTime:this.eventStartTime, endTime:this.eventEndTime, info: this.eventInfo, paramSerializer: '$httpParamSerializerJQLike' }).then(response => {
                    if(response.status === 200){
                        this.calendar = response.data;
                        this.notifyEventUpdated(this.eventTitle, this.eventDate, this.eventHost);
                        this.resetValues();
                    } else {
                        this.window.location.href='app/errors/unknown.html';  
                    }
            });
        }

        // Cancel Update
        cancelEdit() {
            this.selectedEvent = this.backUpEventSelected;
            this.selectedEvent = this.backUpEventSelected;
            this.eventStartTime = this.backUpEventStartTime;
            this.eventEndTime = this.backUpEventEndTime;
            this.eventDate = this.backUpEventDate;

            this.switchEventDetailView(buttonClicked);
        }
        
        getEventDate(){
            //get minutes from the start time and update the date of teh event to have that time
            var hours = this.eventStartTime.getHours();
            var minutes = this.eventStartTime.getMinutes();
            this.eventDate.setHours(hours, minutes, 0);
            this.eDate = new Date(this.eventDate);
        }

        //notification ------------START -----------------

   notifyEventCreated = function (title, date, host) {
        this.notificationService.clearAll();

        this.notificationService.setBodyText("The event with title " + title + " hosted by " + host + " on " + this.convertDate(date) + " was created");
        this.notificationService.setIsArray(false);
        this.notificationService.setTitle("Event Created");
  
        this.notificationWindow = this.uibModal.open({
            templateUrl: 'components/notification/notification.html',
            animation: true,
            controller: "NotificationController", 
    
            resolve: {
                textModal: function () {
                return $scope.textModal;
            }
          }
    
    });

    this.notificationWindow.result.then(function (isOkClicked) {
        if(isOkClicked =='ok'){
                $window.location.href='/calendar';
          } 
        }, function () {
          $log.info('Modal dismissed at: ' + new Date());
        }); 
  }

   notifyEventUpdated = function (title, date, host) {
        this.notificationService.clearAll();

        this.notificationService.setBodyText("The event with title " + title + " hosted by " + host + " on " + this.convertDate(date) + " was updated");
        this.notificationService.setIsArray(false);
        this.notificationService.setTitle("Event Updated");
  
        this.updateEventWindow = this.uibModal.open({
            templateUrl: 'components/notification/notification.html',
            animation: true,
            controller: "NotificationController", 
    
            resolve: {
                textModal: function () {
                return $scope.textModal;
            }
          }
    
    });

    this.updateEventWindow.result.then(function (isOkClicked) {
          if(isOkClicked =='ok'){
                $window.location.href='/calendar';
          } 
        }, function () {
          $log.info('Modal dismissed at: ' + new Date());
        }); 
  }

notifyMissingFields = function () {
        this.notificationService.clearAll();

        this.notificationService.setBodyText("Some fields are missing values. Please, fill all required fields and try again.");
        this.notificationService.setIsArray(false);
        this.notificationService.setTitle("Missing Fields");
  
        this.missingFieldsWindow = this.uibModal.open({
            templateUrl: 'components/notification/notification.html',
            animation: true,
            controller: "NotificationController", 
    
            resolve: {
                textModal: function () {
                return $scope.textModal;
            }
          }
    
    });

    this.missingFieldsWindow.result.then(function (isOkClicked) {
          $rootScope.isOk = isOkClicked;
        }, function () {
          $log.info('Modal dismissed at: ' + new Date());
        }); 

          if(this.rootScope.isOk =='ok'){
          //TODO something that would watch the variable value change ------   console.log("ok clicked ggggggg");
      }
  }

    //notification ------------ END -----------------


    convertDate(isoDate) {
            this.goodDate = new Date(isoDate);
            return this.cal_days_labels[this.goodDate.getDay()] + ', ' + this.goodDate.getDate() + ' ' + this.cal_months_labels[this.goodDate.getMonth()];
        }

        resetValues() {
                this.eventID = '';
                this.eventTitle = '';
                this.eventHost = '';
                this.eventDate = '';
                this.eventStartTime = '';
                this.eventEndTime = '';
                this.eventInfo = '';
                this.eventReminder = '';
                this.eventGuestList = [];
                this.eventDataContainer.clearAll();
        }

        // Add guest to a list;
        private assignGuestList(){
            
            /* Implement later */
            // Push the data the userEvents array
            // this.userEvent.push({title:this.eventTitle, host: this.eventHost, date: this.eventDate,
            //     startTime:this.eventStartTime, info: this.eventInfo, reminder:this.eventReminder, guestList:this.eventGuestList});
        }
        
        /*
        // Format the time
        private formatTime(timeValue){
            var subTime = timeValue.substring(16, 21);
            return subTime;
        }
  */

        //send request to delete an event --- temporarily here for testing etc...
        deleteEvent(event) {
            this.eventID = event._id;
            this.http.patch('/api/calendars/' + this.calendar._id + "/deleteEvent/" + this.eventID).then(response => {
                this.calendar = response.data;
            });
        }

    }
    
angular.module('takeTurnsApp')
  .component('eventCreator', {
    templateUrl: 'app/eventCreator/eventCreator.html',
    controller: EventCreatorComponent
  });

})();
